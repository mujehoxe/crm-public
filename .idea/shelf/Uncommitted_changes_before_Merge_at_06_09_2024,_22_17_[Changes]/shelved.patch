Index: src/app/Community-Leads/page.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"use client\";\nimport RootLayout from \"@/app/components/layout\";\nimport { DatePicker, Select } from \"antd\";\nimport axios from \"axios\";\nimport { motion } from \"framer-motion\";\nimport moment from \"moment/moment\";\nimport Link from \"next/link\";\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { FaPlus } from \"react-icons/fa\";\nimport { HiOutlineDocumentAdd } from \"react-icons/hi\";\nimport { RiUploadCloud2Fill } from \"react-icons/ri\";\nimport { SiGooglesheets } from \"react-icons/si\";\nimport { toast } from \"react-toastify\";\nimport \"rsuite/dist/rsuite.min.css\";\nimport Excelmodal from \"../Leads/excelmodal\";\nimport TokenDecoder from \"../components/Cookies\";\nimport ReminderModal from \"./EditModal/Reminders/ReminderModal\";\nimport BulkModal from \"./Bulk/bulk\";\nimport LeadCard from \"./LeadCard\";\nimport InfoModal from \"./EditModal/InfoModal\";\nimport MeetingModal from \"./EditModal/Meetings/MeetingModal\";\nimport InlineLoader from \"./InlineLoader\";\n\nfunction Cold() {\n  const [TagsCount, setTagsCount] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [selectedValues, setSelectedValues] = useState([]);\n  const [selectedValues2, setSelectedValues2] = useState([]);\n  const [selectedValues3, setSelectedValues3] = useState([]);\n  const [selectedValues4, setSelectedValues4] = useState([]);\n\n  const [leadsData, setLeadsData] = useState({\n    leads: [],\n    selectedLeads: [],\n    currentPage: 1,\n    leadsPerPage: 6,\n    totalLeads: 0,\n    loading: false,\n  });\n\n  const getTotalPages = useCallback(\n    () => Math.ceil(leadsData.totalLeads / leadsData.leadsPerPage),\n    [leadsData.totalLeads, leadsData.leadsPerPage]\n  );\n\n  const [modalStates, setModalStates] = useState({\n    isExcelModalOpen: false,\n    isBulkModalOpen: false,\n    meetingOpenForLead: 0,\n    reminderOpenForLead: 0,\n    setMeetingOpenForLead: (id) => {\n      setModalStates({ ...modalStates, meetingOpenForLead: id });\n    },\n    setReminderOpenForLead: (id) => {\n      setModalStates({ ...modalStates, reminderOpenForLead: id });\n    },\n  });\n\n  const [filters, setFilters] = useState({\n    searchTerm: \"\",\n    selectedUser: [],\n    selectedStatus: [],\n    selectedSource: [],\n    selectedTag: [],\n    date: [],\n  });\n\n  const [sourceOptions, setSourceOptions] = useState([]);\n  const [statusOptions, setStatusOptions] = useState([]);\n\n  const userData = TokenDecoder();\n  const userid = userData ? userData.id : null;\n  const userRole = userData ? userData.role : null;\n\n  const handleSearchTermChange = ({ target: { value } }) => {\n    setFilters({ ...filters, searchTerm: value });\n    setLeadsData({ ...leadsData, currentPage: 1 });\n  };\n\n  const getBaseURL = () => {\n    switch (userRole) {\n      case \"Admin\":\n      case \"superAdmin\":\n        return `/api/Lead/get`;\n      case \"FOS\":\n        return `/api/Lead/FOS/${userid}`;\n      case \"BussinessHead\":\n        return `/api/Lead/hiearchy?role=ATL&userid=${userid}`;\n      case \"PNL\":\n        return `/api/Lead/hiearchy?role=PNL&userid=${userid}`;\n      case \"TL\":\n        return `/api/Lead/hiearchy?role=TL&userid=${userid}`;\n      case \"ATL\":\n        return `/api/Lead/hiearchy?role=ATL&userid=${userid}`;\n      default:\n        throw new Error(\"Invalid user role\");\n    }\n  };\n\n  const getQueryParams = () => {\n    const params = new URLSearchParams();\n    params.append(\"page\", leadsData.currentPage);\n    params.append(\"limit\", leadsData.leadsPerPage);\n\n    filters.date && params.append(\"date\", filters.date);\n    filters.searchTerm && params.append(\"searchterm\", filters.searchTerm);\n    selectedValues.length > 0 &&\n      params.append(\"selectedValues\", selectedValues);\n    selectedValues2.length > 0 &&\n      params.append(\"selectedValues2\", selectedValues2);\n    selectedValues3.length > 0 &&\n      params.append(\"selectedValues3\", selectedValues3);\n    selectedValues4.length > 0 && params.append(\"selectedTag\", selectedValues4);\n\n    return params.toString();\n  };\n\n  const [bulkOperationMade, setBulkOperationMade] = useState(false);\n\n  const fetchLeads = async () => {\n    setLeadsData({ ...leadsData, loading: true });\n    try {\n      const url = getBaseURL();\n      const params = getQueryParams();\n      const response = await axios.get(`${url}?${params}`);\n\n      setLeadsData({\n        ...leadsData,\n        leads: response.data.data,\n        totalLeads: response.data.totalLeads,\n        loading: false,\n      });\n    } catch (error) {\n      console.error(\"Error fetching leads:\", error);\n      toast.error(\"Error fetching leads:\", error.message);\n      setLeadsData({ ...leadsData, loading: false });\n    }\n  };\n\n  useEffect(() => {\n    userRole && fetchLeads(leadsData.currentPage);\n  }, [\n    userRole,\n    userid,\n    selectedValues,\n    selectedValues2,\n    selectedValues3,\n    leadsData.leadsPerPage,\n    leadsData.currentPage,\n    filters.selectedTag,\n    filters.date,\n    filters.searchTerm,\n    bulkOperationMade,\n  ]);\n\n  const [btnShow, setBtnShow] = useState(false);\n\n  const fetchDataAndDownloadExcel = async () => {\n    try {\n      const response = await axios.post(`/api/Lead/export/cold`);\n      const blob = new Blob([response.data], { type: \"text/csv\" });\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = \"leads.csv\";\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n    }\n  };\n\n  const nextPage = () => {\n    const totalPages = getTotalPages();\n    if (leadsData.currentPage < totalPages)\n      setLeadsData({ ...leadsData, currentPage: leadsData.currentPage + 1 });\n  };\n\n  const prevPage = () => {\n    if (leadsData.currentPage > 1)\n      setLeadsData({ ...leadsData, currentPage: leadsData.currentPage - 1 });\n  };\n\n  const openExcelModal = () => {\n    setModalStates({\n      ...modalStates,\n      isExcelModalOpen: !modalStates.isExcelModalOpen,\n    });\n  };\n\n  const openbulkModal = () => {\n    setModalStates({\n      ...modalStates,\n      isBulkModalOpen: !modalStates.isBulkModalOpen,\n    });\n  };\n\n  const handleCardClick = (cardLead, e) => {\n    e.stopPropagation();\n    if (leadsData.selectedLeads.includes(cardLead)) {\n      setLeadsData({\n        ...leadsData,\n        selectedLeads: leadsData.selectedLeads.filter(\n          (lead) => lead._id !== cardLead._id\n        ),\n      });\n    } else {\n      setLeadsData({\n        ...leadsData,\n        selectedLeads: [...leadsData.selectedLeads, cardLead],\n      });\n    }\n  };\n\n  const handleSelectAll = () => {\n    if (leadsData.selectedLeads.length === leadsData.leads.length) {\n      setLeadsData({ ...leadsData, selectedLeads: [] });\n    } else {\n      setLeadsData({ ...leadsData, selectedLeads: leadsData.leads });\n    }\n  };\n\n  function disabledDate(current) {\n    return current && current > moment().endOf(\"day\");\n  }\n\n  useEffect(() => {\n    const fetchStatus = async () => {\n      try {\n        let url = `/api/Status/get`;\n        const response = await axios.get(url);\n        const newStatusOptions = response.data.data.map((status) => ({\n          value: status._id,\n          label: status.Status,\n        }));\n        setStatusOptions(newStatusOptions);\n      } catch (error) {\n        console.error(\"Error fetching status:\", error);\n      }\n    };\n\n    fetchStatus();\n  }, []);\n\n  useEffect(() => {\n    const fetchSource = async () => {\n      try {\n        const response = await axios.get(`/api/Source/get`);\n        const newSourceOptions = response.data.data.map((source) => ({\n          value: source._id,\n          label: source.Source,\n        }));\n        setSourceOptions(newSourceOptions);\n      } catch (error) {\n        console.error(\"Error fetching Source:\", error);\n      }\n    };\n\n    fetchSource();\n  }, []);\n\n  const handleParse = (data) => {\n    setParsedData(data);\n  };\n\n  useEffect(() => {\n    const fetchTags = async () => {\n      try {\n        let url = `/api/tags/get`;\n        const response = await axios.get(url);\n        setTagsCount(response.data.data);\n      } catch (error) {\n        console.error(\"Error fetching Tags:\", error);\n      }\n    };\n\n    fetchTags();\n  }, []);\n\n  const tagOptions = TagsCount.map((tag) => ({\n    label: tag.Tag,\n    value: tag._id,\n  }));\n\n  const countOptions = [\n    { value: \"6\", label: \"6\" },\n    { value: \"12\", label: \"12\" },\n    { value: \"30 \", label: \"30\" },\n  ];\n\n  const deleteSelectedLeads = async () => {\n    try {\n      await axios.delete(`/api/Lead/delete`, {\n        data: { leadIds: leadsData.selectedLeads.map((lead) => lead._id) },\n      });\n      window.location.reload();\n    } catch (error) {\n      console.error(\"Error deleting leads:\", error);\n    }\n  };\n\n  const handleDealSubmission = () => {\n    if (leadsData.selectedLeads.length === 1) {\n      const leadId = leadsData.selectedLeads[0]\n        ? leadsData.selectedLeads[0]._id.toString()\n        : null;\n      if (leadId) {\n        window.location.href = `/Your-Deals/create?leadId=${leadId}`;\n      } else {\n        console.error(\"Lead ID is null.\");\n      }\n    } else if (leadsData.selectedLeads.length > 1) {\n      toast.error(\"You have selected more than 1 Lead\");\n    } else {\n      toast.error(\"You Haven't Selected Any Lead\");\n    }\n  };\n\n  useEffect(() => {\n    if (userRole) {\n      const fetchUsers = async () => {\n        try {\n          const response = await axios.get(\"/api/staff/get\");\n\n          let filteredUsers = response.data.data;\n          if (userRole == \"BussinessHead\") {\n            const PNLUsers = response.data.data.filter(\n              (user) => user.Role === \"PNL\" && user.PrentStaff === userid\n            );\n            const PNLIds = PNLUsers.map((user) => user._id);\n            const tlUsers = response.data.data.filter(\n              (user) => user.Role === \"TL\" && PNLIds.includes(user.PrentStaff)\n            );\n            const tlIds = tlUsers.map((user) => user._id);\n            const atlUsers = response.data.data.filter(\n              (user) => user.Role === \"ATL\" && tlIds.includes(user.PrentStaff)\n            );\n            const atlIds = atlUsers.map((user) => user._id);\n            const fosUsers = response.data.data.filter(\n              (user) => user.Role === \"FOS\" && atlIds.includes(user.PrentStaff)\n            );\n            filteredUsers = [...PNLUsers, ...tlUsers, ...atlUsers, ...fosUsers];\n          } else if (userRole == \"TL\") {\n            const atlUsers = response.data.data.filter(\n              (user) => user.Role === \"ATL\" && user.PrentStaff === userid\n            );\n            const atlIds = atlUsers.map((user) => user._id);\n            const fosUsers = response.data.data.filter(\n              (user) => user.Role === \"FOS\" && atlIds.includes(user.PrentStaff)\n            );\n            filteredUsers = [...atlUsers, ...fosUsers];\n          } else if (userRole == \"PNL\") {\n            const tlUsers = response.data.data.filter(\n              (user) => user.Role === \"TL\" && user.PrentStaff === userid\n            );\n            const tlIds = tlUsers.map((user) => user._id);\n            const atlUsers = response.data.data.filter(\n              (user) => user.Role === \"ATL\" && tlIds.includes(user.PrentStaff)\n            );\n            const atlIds = atlUsers.map((user) => user._id);\n            const fosUsers = response.data.data.filter(\n              (user) => user.Role === \"FOS\" && atlIds.includes(user.PrentStaff)\n            );\n            filteredUsers = [...tlUsers, ...atlUsers, ...fosUsers];\n          } else if (userRole == \"ATL\") {\n            const fosUsers = response.data.data.filter(\n              (user) => user.Role === \"FOS\" && user.PrentStaff === userid\n            );\n            filteredUsers = [...fosUsers];\n          } else if (userRole == \"FOS\") {\n            const fosUsers = response.data.data.filter(\n              (user) => user.Role === \"FOS\" && user._id === userid\n            );\n            filteredUsers = [...fosUsers];\n          } else if (userRole == \"Admin\") {\n            filteredUsers = response.data.data;\n          }\n          filteredUsers = filteredUsers.filter(\n            (user) =>\n              ![\n                \"HR\",\n                \"Finance\",\n                \"Manager\",\n                \"Operations\",\n                \"Marketing\",\n                \"SalesHead\",\n              ].includes(user.Role)\n          );\n\n          const username =\n            response.data.data.find((user) => user._id === userid)?.username ||\n            \"Default Username\";\n          const defaultOption = { value: userid, label: username };\n          filteredUsers = filteredUsers.filter((user) => user._id !== userid);\n\n          const mappedUsers =\n            filteredUsers.length > 0\n              ? [\n                  defaultOption,\n                  ...filteredUsers.map((user) => ({\n                    value: user._id,\n                    label: user.username,\n                  })),\n                ]\n              : [defaultOption];\n\n          setUsers(mappedUsers);\n        } catch (error) {\n          console.error(\"Error fetching users:\", error);\n        }\n      };\n\n      fetchUsers();\n    }\n  }, [userRole]);\n\n  const handleUserChange = (selected) => {\n    setFilters({ ...filters, selectedUser: selected });\n    const selectedValues = selected.map((user) => user);\n    setSelectedValues(selectedValues);\n  };\n\n  const handleStatusChange = (selected) => {\n    setFilters({ ...filters, selectedStatus: selected });\n    const selectedValues2 = selected.map((status) => status);\n    setSelectedValues2(selectedValues2);\n  };\n\n  const handleSourceChange = (selected) => {\n    setFilters({ ...filters, selectedSource: selected });\n    const selectedValues3 = selected.map((source) => source);\n    setSelectedValues3(selectedValues3);\n  };\n\n  const handleTagChange = (selected) => {\n    setFilters({ ...filters, selectedTag: selected });\n    const selectedValues4 = selected.map((tags) => tags);\n    setSelectedValues4(selectedValues4);\n  };\n\n  const handleDateChange = (date, datestring) => {\n    if (date) {\n      setFilters({ ...filters, date: [date[0].$d, date[1].$d] });\n    } else {\n      setFilters({ ...filters, date: null });\n    }\n  };\n\n  const [edit, setEdit] = useState(0);\n  const [activeModalLead, setActiveModalLead] = useState(null);\n\n  const handleEditClick = useCallback((lead) => {\n    setEdit(lead._id);\n    setActiveModalLead(lead);\n  }, []);\n\n  const containerRef = useRef(null);\n  const handleClickOutsideButton = (event) => {\n    if (containerRef.current && !containerRef.current.contains(event.target)) {\n      setBtnShow(false);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener(\"mousedown\", handleClickOutsideButton);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutsideButton);\n    };\n  }, []);\n\n  const renderLeadCards = useCallback(\n    (leads) =>\n      leads.map((lead) => (\n        <LeadCard\n          key={lead._id}\n          lead={lead}\n          setCurrentPageLeads={(leads) => setLeadsData({ ...leadsData, leads })}\n          statusOptions={statusOptions}\n          sourceOptions={sourceOptions}\n          handleCardClick={handleCardClick}\n          selectedLeads={leadsData.selectedLeads}\n          onEditClick={() => handleEditClick(lead)}\n          onMeetingClick={() => {\n            modalStates.setMeetingOpenForLead(lead._id);\n            setActiveModalLead(lead);\n          }}\n          onReminderClick={() => {\n            modalStates.setReminderOpenForLead(lead._id);\n            setActiveModalLead(lead);\n          }}\n        />\n      )),\n    [\n      statusOptions,\n      sourceOptions,\n      leadsData,\n      handleCardClick,\n      handleEditClick,\n      modalStates,\n    ]\n  );\n\n  const renderModals = useMemo(() => {\n    if (!activeModalLead) return null;\n\n    return (\n      <>\n        {edit === activeModalLead._id && (\n          <InfoModal\n            leadData={activeModalLead}\n            modalStates={modalStates}\n            onClose={() => {\n              setEdit(0);\n              setActiveModalLead(null);\n            }}\n          />\n        )}\n        {modalStates.meetingOpenForLead === activeModalLead._id && (\n          <MeetingModal\n            onClose={() => {\n              modalStates.setMeetingOpenForLead(0);\n            }}\n            leadId={activeModalLead._id}\n          />\n        )}\n        {modalStates.reminderOpenForLead === activeModalLead._id && (\n          <ReminderModal\n            onClose={() => {\n              modalStates.setReminderOpenForLead(0);\n            }}\n            lead={activeModalLead._id}\n          />\n        )}\n      </>\n    );\n  }, [activeModalLead, edit, modalStates]);\n\n  const renderLeadGrid = useMemo(() => {\n    if (filters.searchTerm) {\n      return leadsData.leads.length > 0 ? (\n        renderLeadCards(leadsData.leads)\n      ) : (\n        <p>No leads found for the given search term.</p>\n      );\n    } else if (Array.isArray(leadsData.leads)) {\n      return renderLeadCards(leadsData.leads);\n    }\n    return null;\n  }, [filters.searchTerm, leadsData.leads, renderLeadCards]);\n\n  return (\n    <RootLayout>\n      <div className=\"flex justify-end w-full h-screen !px-0\">\n        <div className=\"flex flex-col\">\n          {modalStates.isBulkModalOpen && (\n            <BulkModal\n              onClose={openbulkModal}\n              selectedLeads={leadsData.selectedLeads}\n              setBulkOperationMade={setBulkOperationMade}\n            />\n          )}\n          {modalStates.isExcelModalOpen && (\n            <Excelmodal onClose={openExcelModal} onParse={handleParse} />\n          )}\n          <div className=\"w-full\">\n            <p className=\"font-Satoshi tablet:text-lg !mb-0 mobile:text-lg text-black font-bold\">\n              Leads\n            </p>\n\n            <div className=\"w-full tablet:grid tablet:grid-cols-6 mobile:flex mobile:flex-col mobile:justify-center tablet:items-center mobile:items-stretch mobile:gap-x-1 mt-2\">\n              <div className=\"tablet:col-span-4 mobile:col-span-1 grid tablet:grid-cols-6 mobile:grid-cols-3 items-center h-full mobile:order-last mobile:mt-3 tablet:mt-0 tablet:order-1 gap-x-1\">\n                <div className=\"w-full h-full cursor-pointer\">\n                  <DatePicker.RangePicker\n                    format={\"DD-MM-YYYY\"}\n                    style={{ width: \"100%\", height: \"100%\" }}\n                    onChange={handleDateChange}\n                    needConfirm\n                    disabledDate={disabledDate}\n                  />\n                </div>\n\n                <div className=\"w-full h-full cursor-pointer\">\n                  <Select\n                    mode=\"multiple\"\n                    allowClear\n                    style={{ width: \"100%\", height: \"100%\" }}\n                    defaultValue={filters.selectedUser}\n                    onChange={handleUserChange}\n                    options={users}\n                    maxTagCount=\"responsive\"\n                    placeholder={\"Users\"}\n                  />\n                </div>\n\n                <div className=\"w-full h-full cursor-pointer\">\n                  <Select\n                    mode=\"multiple\"\n                    allowClear\n                    style={{ width: \"100%\", height: \"100%\" }}\n                    defaultValue={filters.selectedStatus}\n                    onChange={handleStatusChange}\n                    options={statusOptions}\n                    placeholder={\"Status\"}\n                    maxTagCount=\"responsive\"\n                  />\n                </div>\n\n                <div className=\"w-full h-full cursor-pointer\">\n                  <Select\n                    mode=\"multiple\"\n                    allowClear\n                    style={{ width: \"100%\", height: \"100%\" }}\n                    defaultValue={filters.selectedStatus}\n                    onChange={handleSourceChange}\n                    options={sourceOptions}\n                    placeholder={\"Source\"}\n                    maxTagCount=\"responsive\"\n                  />\n                </div>\n                <div className=\"w-full h-full cursor-pointer\">\n                  <Select\n                    mode=\"multiple\"\n                    allowClear\n                    style={{ width: \"100%\", height: \"100%\" }}\n                    defaultValue={filters.selectedTag}\n                    onChange={handleTagChange}\n                    options={tagOptions}\n                    placeholder={\"Tags\"}\n                    maxTagCount=\"responsive\"\n                  />\n                </div>\n                <div className=\"w-full h-full cursor-pointer\">\n                  <Select\n                    mode=\"single\"\n                    style={{ width: \"100%\", height: \"100%\" }}\n                    allowClear\n                    defaultValue={filters.selectedTag}\n                    onChange={(selected) => {\n                      setLeadsData({\n                        ...leadsData,\n                        leadsPerPage: parseInt(selected, 10),\n                        currentPage: 1,\n                      });\n                    }}\n                    options={countOptions}\n                    placeholder={\"Count\"}\n                  />\n                </div>\n              </div>\n              <input\n                className=\"rounded-md tablet:col-span-2 !border border-slate-300 text-lg focus:outline-none transition-all duration-200 focus:shadow-md bg-white px-3 py-1\"\n                placeholder=\"Search Leads..\"\n                value={filters.searchTerm}\n                onChange={handleSearchTermChange}\n              />\n            </div>\n            <div className=\"flex items-center tablet:w-2/5 mobile:w-full gap-2 mt-3\">\n              <button\n                onClick={handleDealSubmission}\n                className=\"bg-[#83D2FF] hover:bg-transparent hover:border-[#83D2FF] border-2 transition-all duration-300 rounded-md tablet:px-3  tablet:py-2 mobile:px-2  mobile:py-2 tablet:text-md `mobile:text-sm font-Satoshi font-bold\"\n              >\n                Submit Deal\n              </button>\n              <button\n                onClick={openbulkModal}\n                className=\"bg-[#83D2FF] hover:bg-transparent hover:border-[#83D2FF] border-2 transition-all duration-300 rounded-md tablet:px-3  tablet:py-2 mobile:px-2  mobile:py-2 tablet:text-md `mobile:text-sm font-Satoshi font-bold\"\n              >\n                Mapping\n              </button>\n              {\n                <button\n                  onClick={handleSelectAll}\n                  className=\"bg-[#83D2FF] hover:bg-transparent hover:border-[#83D2FF] border-2 transition-all duration-300 rounded-md tablet:px-3  tablet:py-2 mobile:px-2  mobile:py-2 tablet:text-md `mobile:text-sm font-Satoshi font-bold\"\n                >\n                  Select All\n                </button>\n              }\n\n              {userRole !== \"FOS\" && (\n                <>\n                  {leadsData.selectedLeads.length > 0 && (\n                    <button\n                      onClick={deleteSelectedLeads}\n                      className=\"bg-[#83D2FF] hover:bg-transparent hover:border-[#83D2FF] border-2 transition-all duration-300 rounded-md tablet:px-3  tablet:py-2 mobile:px-2  mobile:py-2 tablet:text-md `mobile:text-sm font-Satoshi font-bold\"\n                    >\n                      Delete All\n                    </button>\n                  )}\n                </>\n              )}\n            </div>\n\n            {leadsData.loading ? (\n              <InlineLoader className=\"flex w-full mt-10 text-center text-blue-900 justify-center rounded-2xl bg-[#00f] bg-opacity-10 items-cente h-56\" />\n            ) : (\n              getTotalPages() > 0 && (\n                <>\n                  <p className=\"font-Satoshi tablet:text-md mobile:text-sm mt-3 text-black font-bold\">\n                    Showing{\" \"}\n                    {Math.min(leadsData.leadsPerPage, leadsData.totalLeads)}{\" \"}\n                    leads of {leadsData.totalLeads} total{\" \"}\n                  </p>\n                  <div className=\"grid gap-x-4 gap-y-4 mobile:grid-cols-1 tablet:grid-cols-3 desktop:grid-cols-3\">\n                    {renderLeadGrid}\n                    {renderModals}\n                  </div>\n                </>\n              )\n            )}\n\n            <div ref={containerRef} className=\"fixed bottom-5 right-6 z-10\">\n              <div className={`relative rounded-full cursor-pointer`}>\n                <motion.div\n                  animate={{ rotate: btnShow ? 45 : 0 }}\n                  transition={{ duration: 0.6, type: \"spring\" }}\n                  onClick={() => {\n                    setBtnShow(!btnShow);\n                  }}\n                  className={`size-12 text-2xl font-bold flex items-center justify-center bg-black text-slate-100 cursor-pointer rounded-full`}\n                >\n                  <FaPlus />\n                </motion.div>\n                <motion.div\n                  onClick={openExcelModal}\n                  animate={{ bottom: btnShow ? \"120%\" : 0 }}\n                  transition={{ duration: 0.4, type: \"spring\", delay: 0.2 }}\n                  className={`size-12 cursor-pointer bg-sky-300  text-2xl -z-10 flex items-center justify-center rounded-full absolute  `}\n                >\n                  <RiUploadCloud2Fill />\n                </motion.div>\n                <motion.div\n                  onClick={fetchDataAndDownloadExcel}\n                  animate={{ right: btnShow ? \"120%\" : 0 }}\n                  transition={{ duration: 0.4, type: \"spring\" }}\n                  className={`size-12 bg-sky-300 cursor-pointer  text-2xl -z-10 flex items-center justify-center bottom-0 rounded-full absolute  `}\n                >\n                  <SiGooglesheets />\n                </motion.div>\n                <motion.div\n                  animate={{\n                    right: btnShow ? \"120%\" : 0,\n                    bottom: btnShow ? \"120%\" : 0,\n                  }}\n                  transition={{ duration: 0.4, type: \"spring\", delay: 0.1 }}\n                  className={`size-12 bg-sky-300 cursor-pointer text-2xl -z-10 flex items-center justify-center rounded-full absolute  `}\n                >\n                  <Link\n                    href={{\n                      pathname: \"/Leads/Add\",\n                      query: { lead: \"cold\" },\n                    }}\n                  >\n                    <HiOutlineDocumentAdd className=\"text-black\" />\n                  </Link>\n                </motion.div>\n              </div>\n            </div>\n\n            <div className=\"mt-10\">\n              <div\n                className=\"dataTables_paginate paging_simple_numbers\"\n                id=\"datatable_paginate\"\n              >\n                <ul className=\"pagination pagination-rounded flex flex-row justify-center\">\n                  {!leadsData.loading && getTotalPages() > 0 && (\n                    <>\n                      <li\n                        className={`paginate_button page-item previous ${\n                          leadsData.currentPage === 1 ? \"disabled\" : \"\"\n                        }`}\n                        id=\"datatable_previous\"\n                      >\n                        <button onClick={prevPage} className=\"page-link\">\n                          <i className=\"fa fa-chevron-left\" />\n                        </button>\n                      </li>\n                      <div className=\"flex flex-row px-3 gap-1\">\n                        {Array.from({ length: getTotalPages() }, (_, i) => (\n                          <li\n                            key={i}\n                            className={`paginate_button page-item ${\n                              leadsData.currentPage === i + 1 ? \"active\" : \"\"\n                            }`}\n                          >\n                            <button\n                              onClick={() =>\n                                setLeadsData({\n                                  ...leadsData,\n                                  currentPage: i + 1,\n                                })\n                              }\n                              className=\"page-link\"\n                            >\n                              {i + 1}\n                            </button>\n                          </li>\n                        ))}\n                      </div>\n                      <li\n                        className={`paginate_button page-item next ${\n                          leadsData.currentPage === getTotalPages()\n                            ? \"disabled\"\n                            : \"\"\n                        }`}\n                        id=\"datatable_next\"\n                      >\n                        <button onClick={nextPage} className=\"page-link\">\n                          {\" \"}\n                          <i className=\"fa fa-chevron-right\" />\n                        </button>\n                      </li>\n                    </>\n                  )}\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </RootLayout>\n  );\n}\n\nexport default Cold;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/Community-Leads/page.js b/src/app/Community-Leads/page.js
--- a/src/app/Community-Leads/page.js	(revision f15228121b92c5b2e1a927a28ed7a647cf2253b1)
+++ b/src/app/Community-Leads/page.js	(date 1725657382911)
@@ -2,9 +2,7 @@
 import RootLayout from "@/app/components/layout";
 import { DatePicker, Select } from "antd";
 import axios from "axios";
-import { motion } from "framer-motion";
 import moment from "moment/moment";
-import Link from "next/link";
 import React, {
   useCallback,
   useEffect,
@@ -12,13 +10,8 @@
   useRef,
   useState,
 } from "react";
-import { FaPlus } from "react-icons/fa";
-import { HiOutlineDocumentAdd } from "react-icons/hi";
-import { RiUploadCloud2Fill } from "react-icons/ri";
-import { SiGooglesheets } from "react-icons/si";
 import { toast } from "react-toastify";
 import "rsuite/dist/rsuite.min.css";
-import Excelmodal from "../Leads/excelmodal";
 import TokenDecoder from "../components/Cookies";
 import ReminderModal from "./EditModal/Reminders/ReminderModal";
 import BulkModal from "./Bulk/bulk";
@@ -26,8 +19,9 @@
 import InfoModal from "./EditModal/InfoModal";
 import MeetingModal from "./EditModal/Meetings/MeetingModal";
 import InlineLoader from "./InlineLoader";
+import Pagination from "../components/Pagination";
 
-function Cold() {
+export default function CommunityLeadsPage() {
   const [TagsCount, setTagsCount] = useState([]);
   const [users, setUsers] = useState([]);
   const [selectedValues, setSelectedValues] = useState([]);
@@ -111,11 +105,11 @@
     filters.date && params.append("date", filters.date);
     filters.searchTerm && params.append("searchterm", filters.searchTerm);
     selectedValues.length > 0 &&
-      params.append("selectedValues", selectedValues);
+    params.append("selectedValues", selectedValues);
     selectedValues2.length > 0 &&
-      params.append("selectedValues2", selectedValues2);
+    params.append("selectedValues2", selectedValues2);
     selectedValues3.length > 0 &&
-      params.append("selectedValues3", selectedValues3);
+    params.append("selectedValues3", selectedValues3);
     selectedValues4.length > 0 && params.append("selectedTag", selectedValues4);
 
     return params.toString();
@@ -177,17 +171,6 @@
     }
   };
 
-  const nextPage = () => {
-    const totalPages = getTotalPages();
-    if (leadsData.currentPage < totalPages)
-      setLeadsData({ ...leadsData, currentPage: leadsData.currentPage + 1 });
-  };
-
-  const prevPage = () => {
-    if (leadsData.currentPage > 1)
-      setLeadsData({ ...leadsData, currentPage: leadsData.currentPage - 1 });
-  };
-
   const openExcelModal = () => {
     setModalStates({
       ...modalStates,
@@ -195,7 +178,7 @@
     });
   };
 
-  const openbulkModal = () => {
+  const openBulkModal = () => {
     setModalStates({
       ...modalStates,
       isBulkModalOpen: !modalStates.isBulkModalOpen,
@@ -403,12 +386,12 @@
           const mappedUsers =
             filteredUsers.length > 0
               ? [
-                  defaultOption,
-                  ...filteredUsers.map((user) => ({
-                    value: user._id,
-                    label: user.username,
-                  })),
-                ]
+                defaultOption,
+                ...filteredUsers.map((user) => ({
+                  value: user._id,
+                  label: user.username,
+                })),
+              ]
               : [defaultOption];
 
           setUsers(mappedUsers);
@@ -507,6 +490,29 @@
     ]
   );
 
+  const renderLeadGrid = useMemo(() => {
+    if (filters.searchTerm) {
+      return leadsData.leads.length > 0 ? (
+        <ul role="list" className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
+          {renderLeadCards(leadsData.leads)}
+        </ul>
+      ) : (
+        <p>No leads found for the given search term.</p>
+      );
+    } else if (Array.isArray(leadsData.leads)) {
+      return (
+        leadsData.leads.length > 0 ? (
+          <ul role="list" className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
+            {renderLeadCards(leadsData.leads)}
+          </ul>
+        ) : (
+          <p>No leads found.</p>
+        )
+      );
+    }
+    return null;
+  }, [filters.searchTerm, leadsData.leads, renderLeadCards]);
+
   const renderModals = useMemo(() => {
     if (!activeModalLead) return null;
 
@@ -542,290 +548,112 @@
     );
   }, [activeModalLead, edit, modalStates]);
 
-  const renderLeadGrid = useMemo(() => {
-    if (filters.searchTerm) {
-      return leadsData.leads.length > 0 ? (
-        renderLeadCards(leadsData.leads)
-      ) : (
-        <p>No leads found for the given search term.</p>
-      );
-    } else if (Array.isArray(leadsData.leads)) {
-      return renderLeadCards(leadsData.leads);
-    }
-    return null;
-  }, [filters.searchTerm, leadsData.leads, renderLeadCards]);
-
   return (
     <RootLayout>
-      <div className="flex justify-end w-full h-screen !px-0">
-        <div className="flex flex-col">
-          {modalStates.isBulkModalOpen && (
-            <BulkModal
-              onClose={openbulkModal}
-              selectedLeads={leadsData.selectedLeads}
-              setBulkOperationMade={setBulkOperationMade}
-            />
-          )}
-          {modalStates.isExcelModalOpen && (
-            <Excelmodal onClose={openExcelModal} onParse={handleParse} />
-          )}
-          <div className="w-full">
-            <p className="font-Satoshi tablet:text-lg !mb-0 mobile:text-lg text-black font-bold">
-              Leads
-            </p>
+      <div className="container h-screen mx-auto px-4">
+        <h1 className="text-2xl font-bold text-gray-900 mb-6">Leads</h1>
 
-            <div className="w-full tablet:grid tablet:grid-cols-6 mobile:flex mobile:flex-col mobile:justify-center tablet:items-center mobile:items-stretch mobile:gap-x-1 mt-2">
-              <div className="tablet:col-span-4 mobile:col-span-1 grid tablet:grid-cols-6 mobile:grid-cols-3 items-center h-full mobile:order-last mobile:mt-3 tablet:mt-0 tablet:order-1 gap-x-1">
-                <div className="w-full h-full cursor-pointer">
-                  <DatePicker.RangePicker
-                    format={"DD-MM-YYYY"}
-                    style={{ width: "100%", height: "100%" }}
-                    onChange={handleDateChange}
-                    needConfirm
-                    disabledDate={disabledDate}
-                  />
-                </div>
-
-                <div className="w-full h-full cursor-pointer">
-                  <Select
-                    mode="multiple"
-                    allowClear
-                    style={{ width: "100%", height: "100%" }}
-                    defaultValue={filters.selectedUser}
-                    onChange={handleUserChange}
-                    options={users}
-                    maxTagCount="responsive"
-                    placeholder={"Users"}
-                  />
-                </div>
-
-                <div className="w-full h-full cursor-pointer">
-                  <Select
-                    mode="multiple"
-                    allowClear
-                    style={{ width: "100%", height: "100%" }}
-                    defaultValue={filters.selectedStatus}
-                    onChange={handleStatusChange}
-                    options={statusOptions}
-                    placeholder={"Status"}
-                    maxTagCount="responsive"
-                  />
-                </div>
-
-                <div className="w-full h-full cursor-pointer">
-                  <Select
-                    mode="multiple"
-                    allowClear
-                    style={{ width: "100%", height: "100%" }}
-                    defaultValue={filters.selectedStatus}
-                    onChange={handleSourceChange}
-                    options={sourceOptions}
-                    placeholder={"Source"}
-                    maxTagCount="responsive"
-                  />
-                </div>
-                <div className="w-full h-full cursor-pointer">
-                  <Select
-                    mode="multiple"
-                    allowClear
-                    style={{ width: "100%", height: "100%" }}
-                    defaultValue={filters.selectedTag}
-                    onChange={handleTagChange}
-                    options={tagOptions}
-                    placeholder={"Tags"}
-                    maxTagCount="responsive"
-                  />
-                </div>
-                <div className="w-full h-full cursor-pointer">
-                  <Select
-                    mode="single"
-                    style={{ width: "100%", height: "100%" }}
-                    allowClear
-                    defaultValue={filters.selectedTag}
-                    onChange={(selected) => {
-                      setLeadsData({
-                        ...leadsData,
-                        leadsPerPage: parseInt(selected, 10),
-                        currentPage: 1,
-                      });
-                    }}
-                    options={countOptions}
-                    placeholder={"Count"}
-                  />
-                </div>
-              </div>
-              <input
-                className="rounded-md tablet:col-span-2 !border border-slate-300 text-lg focus:outline-none transition-all duration-200 focus:shadow-md bg-white px-3 py-1"
-                placeholder="Search Leads.."
-                value={filters.searchTerm}
-                onChange={handleSearchTermChange}
-              />
-            </div>
-            <div className="flex items-center tablet:w-2/5 mobile:w-full gap-2 mt-3">
-              <button
-                onClick={handleDealSubmission}
-                className="bg-[#83D2FF] hover:bg-transparent hover:border-[#83D2FF] border-2 transition-all duration-300 rounded-md tablet:px-3  tablet:py-2 mobile:px-2  mobile:py-2 tablet:text-md `mobile:text-sm font-Satoshi font-bold"
-              >
-                Submit Deal
-              </button>
-              <button
-                onClick={openbulkModal}
-                className="bg-[#83D2FF] hover:bg-transparent hover:border-[#83D2FF] border-2 transition-all duration-300 rounded-md tablet:px-3  tablet:py-2 mobile:px-2  mobile:py-2 tablet:text-md `mobile:text-sm font-Satoshi font-bold"
-              >
-                Mapping
-              </button>
-              {
-                <button
-                  onClick={handleSelectAll}
-                  className="bg-[#83D2FF] hover:bg-transparent hover:border-[#83D2FF] border-2 transition-all duration-300 rounded-md tablet:px-3  tablet:py-2 mobile:px-2  mobile:py-2 tablet:text-md `mobile:text-sm font-Satoshi font-bold"
-                >
-                  Select All
-                </button>
-              }
+        <div className="mb-6 grid grid-cols-1 gap-y-4 sm:grid-cols-2 sm:gap-x-4 lg:grid-cols-6">
+          <DatePicker.RangePicker
+            format="DD-MM-YYYY"
+            className="w-full"
+            onChange={handleDateChange}
+            disabledDate={disabledDate}
+          />
+          <Select
+            mode="multiple"
+            allowClear
+            style={{ width: '100%' }}
+            placeholder="Users"
+            onChange={handleUserChange}
+            options={users}
+            maxTagCount="responsive"
+          />
+          <Select
+            mode="multiple"
+            allowClear
+            style={{ width: '100%' }}
+            placeholder="Status"
+            onChange={handleStatusChange}
+            options={statusOptions}
+            maxTagCount="responsive"
+          />
+          <Select
+            mode="multiple"
+            allowClear
+            style={{ width: '100%' }}
+            placeholder="Source"
+            onChange={handleSourceChange}
+            options={sourceOptions}
+            maxTagCount="responsive"
+          />
+          <Select
+            mode="multiple"
+            allowClear
+            style={{ width: '100%' }}
+            placeholder="Tags"
+            onChange={handleTagChange}
+            options={tagOptions}
+            maxTagCount="responsive"
+          />
+          <Select
+            style={{ width: '100%' }}
+            placeholder="Count"
+            onChange={(selected) => {
+              setLeadsData({
+                ...leadsData,
+                leadsPerPage: parseInt(selected, 10),
+                currentPage: 1,
+              });
+            }}
+            options={countOptions}
+          />
+        </div>
+
+        <div className="mb-6">
+          <input
+            className="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
+            type="text"
+            placeholder="Search Leads..."
+            value={filters.searchTerm}
+            onChange={handleSearchTermChange}
+          />
+        </div>
 
-              {userRole !== "FOS" && (
-                <>
-                  {leadsData.selectedLeads.length > 0 && (
-                    <button
-                      onClick={deleteSelectedLeads}
-                      className="bg-[#83D2FF] hover:bg-transparent hover:border-[#83D2FF] border-2 transition-all duration-300 rounded-md tablet:px-3  tablet:py-2 mobile:px-2  mobile:py-2 tablet:text-md `mobile:text-sm font-Satoshi font-bold"
-                    >
-                      Delete All
-                    </button>
-                  )}
-                </>
-              )}
-            </div>
+        <div className="mb-6 flex flex-wrap gap-2">
+          <button onClick={handleDealSubmission} className="btn-primary">Submit Deal</button>
+          <button onClick={openBulkModal} className="btn-primary">Mapping</button>
+          <button onClick={handleSelectAll} className="btn-primary">Select All</button>
+          {userRole !== "FOS" && leadsData.selectedLeads.length > 0 && (
+            <button onClick={deleteSelectedLeads} className="btn-danger">Delete All</button>
+          )}
+        </div>
 
-            {leadsData.loading ? (
-              <InlineLoader className="flex w-full mt-10 text-center text-blue-900 justify-center rounded-2xl bg-[#00f] bg-opacity-10 items-cente h-56" />
-            ) : (
-              getTotalPages() > 0 && (
-                <>
-                  <p className="font-Satoshi tablet:text-md mobile:text-sm mt-3 text-black font-bold">
-                    Showing{" "}
-                    {Math.min(leadsData.leadsPerPage, leadsData.totalLeads)}{" "}
-                    leads of {leadsData.totalLeads} total{" "}
-                  </p>
-                  <div className="grid gap-x-4 gap-y-4 mobile:grid-cols-1 tablet:grid-cols-3 desktop:grid-cols-3">
-                    {renderLeadGrid}
-                    {renderModals}
-                  </div>
-                </>
-              )
-            )}
-
-            <div ref={containerRef} className="fixed bottom-5 right-6 z-10">
-              <div className={`relative rounded-full cursor-pointer`}>
-                <motion.div
-                  animate={{ rotate: btnShow ? 45 : 0 }}
-                  transition={{ duration: 0.6, type: "spring" }}
-                  onClick={() => {
-                    setBtnShow(!btnShow);
-                  }}
-                  className={`size-12 text-2xl font-bold flex items-center justify-center bg-black text-slate-100 cursor-pointer rounded-full`}
-                >
-                  <FaPlus />
-                </motion.div>
-                <motion.div
-                  onClick={openExcelModal}
-                  animate={{ bottom: btnShow ? "120%" : 0 }}
-                  transition={{ duration: 0.4, type: "spring", delay: 0.2 }}
-                  className={`size-12 cursor-pointer bg-sky-300  text-2xl -z-10 flex items-center justify-center rounded-full absolute  `}
-                >
-                  <RiUploadCloud2Fill />
-                </motion.div>
-                <motion.div
-                  onClick={fetchDataAndDownloadExcel}
-                  animate={{ right: btnShow ? "120%" : 0 }}
-                  transition={{ duration: 0.4, type: "spring" }}
-                  className={`size-12 bg-sky-300 cursor-pointer  text-2xl -z-10 flex items-center justify-center bottom-0 rounded-full absolute  `}
-                >
-                  <SiGooglesheets />
-                </motion.div>
-                <motion.div
-                  animate={{
-                    right: btnShow ? "120%" : 0,
-                    bottom: btnShow ? "120%" : 0,
-                  }}
-                  transition={{ duration: 0.4, type: "spring", delay: 0.1 }}
-                  className={`size-12 bg-sky-300 cursor-pointer text-2xl -z-10 flex items-center justify-center rounded-full absolute  `}
-                >
-                  <Link
-                    href={{
-                      pathname: "/Leads/Add",
-                      query: { lead: "cold" },
-                    }}
-                  >
-                    <HiOutlineDocumentAdd className="text-black" />
-                  </Link>
-                </motion.div>
-              </div>
-            </div>
-
-            <div className="mt-10">
-              <div
-                className="dataTables_paginate paging_simple_numbers"
-                id="datatable_paginate"
-              >
-                <ul className="pagination pagination-rounded flex flex-row justify-center">
-                  {!leadsData.loading && getTotalPages() > 0 && (
-                    <>
-                      <li
-                        className={`paginate_button page-item previous ${
-                          leadsData.currentPage === 1 ? "disabled" : ""
-                        }`}
-                        id="datatable_previous"
-                      >
-                        <button onClick={prevPage} className="page-link">
-                          <i className="fa fa-chevron-left" />
-                        </button>
-                      </li>
-                      <div className="flex flex-row px-3 gap-1">
-                        {Array.from({ length: getTotalPages() }, (_, i) => (
-                          <li
-                            key={i}
-                            className={`paginate_button page-item ${
-                              leadsData.currentPage === i + 1 ? "active" : ""
-                            }`}
-                          >
-                            <button
-                              onClick={() =>
-                                setLeadsData({
-                                  ...leadsData,
-                                  currentPage: i + 1,
-                                })
-                              }
-                              className="page-link"
-                            >
-                              {i + 1}
-                            </button>
-                          </li>
-                        ))}
-                      </div>
-                      <li
-                        className={`paginate_button page-item next ${
-                          leadsData.currentPage === getTotalPages()
-                            ? "disabled"
-                            : ""
-                        }`}
-                        id="datatable_next"
-                      >
-                        <button onClick={nextPage} className="page-link">
-                          {" "}
-                          <i className="fa fa-chevron-right" />
-                        </button>
-                      </li>
-                    </>
-                  )}
-                </ul>
-              </div>
-            </div>
-          </div>
-        </div>
+        {leadsData.loading ? (
+          <InlineLoader className="flex w-full mt-10 text-center text-blue-900 justify-center rounded-2xl bg-blue-100 items-center h-56" />
+        ) : (
+          getTotalPages() > 0 && (
+            <>
+              {renderLeadGrid}
+
+              <span className="text-sm text-gray-700 mt-2">
+                Showing {Math.min(leadsData.leadsPerPage, leadsData.totalLeads)} leads of {leadsData.totalLeads} total
+              </span>
+              <Pagination
+                currentPage={leadsData.currentPage}
+                setCurrentPage={(pageNumber) => setLeadsData({ ...leadsData, currentPage: pageNumber })}
+                totalPages={getTotalPages()}
+              />
+            </>
+          )
+        )}
+
+        {renderModals}
+        <BulkModal
+          onClose={setModalStates({...modalStates, isBulkModalOpen: false})}
+          selectedLeads={leadsData.selectedLeads}
+          setBulkOperationMade={setBulkOperationMade} />
       </div>
     </RootLayout>
   );
 }
-
-export default Cold;
